package evm_test

import (
	"context"
	"encoding/hex"
	"fmt"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/scalarorg/relayers/pkg/clients/evm"
	contracts "github.com/scalarorg/relayers/pkg/clients/evm/contracts/generated"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestConvertContractCallWithToken2Model(t *testing.T) {
	sepoliaClient, err := evm.NewEvmClient(&globalConfig, sepoliaConfig, nil, nil, nil)
	require.NoError(t, err)
	gatewayAddress := common.HexToAddress("0x320B307AF11918C752F5ddF415679499BC880F74")
	scalarGatewayAbi, err := contracts.IScalarGatewayMetaData.GetAbi()
	require.NoError(t, err)
	topics := []common.Hash{scalarGatewayAbi.Events["ContractCallWithToken"].ID}
	t.Logf("topics %v", topics)
	query := ethereum.FilterQuery{
		FromBlock: big.NewInt(int64(8077640)),
		ToBlock:   big.NewInt(int64(8077640)),
		Addresses: []common.Address{gatewayAddress},
		Topics:    [][]common.Hash{topics},
	}
	logs, err := sepoliaClient.Client.FilterLogs(context.Background(), query)
	require.NoError(t, err)
	require.Equal(t, 1, len(logs))
	payload, err := hex.DecodeString
	require.NoError(t, err)
	// t.Logf("payload %v", payload)
	contractCallWithTokenEvent := contracts.IScalarGatewayContractCallWithToken{
		Sender:                     common.HexToAddress("0x4FAb6cB4c6E8b72F1529EDA3E71f45127a85D444"),
		DestinationChain:           "bitcoin|4",
		DestinationContractAddress: "0xD3c404704bbD80902831D99f42df12C47B3B9887",
		PayloadHash:                logs[0].Topics[2],
		Payload:                    payload,
		Symbol:                     "sBtc",
		Amount:                     big.NewInt(4741),
		Raw:                        logs[0],
	}
	contractCallWithToken, err := sepoliaClient.ContractCallWithToken2Model(&contractCallWithTokenEvent)
	require.NoError(t, err)
	t.Logf("contractCallWithToken %v", contractCallWithToken)
	assert.Equal(t, "tb1q03y3wd3wy4tgsk9msyn4zyreg63uw6dk0fndvk", contractCallWithToken.DestinationAddress)

}
func TestExecuteDestinationCall(t *testing.T) {
	event := contracts.IScalarGatewayContractCallApproved{
		CommandId:       [32]byte{165, 197, 245, 62, 7, 21, 210, 155, 218, 25, 18, 193, 83, 219, 37, 131, 103, 126, 138, 174, 215, 52, 133, 121, 246, 176, 19, 134, 187, 157, 203, 86},
		SourceChain:     "bitcoin|4",
		SourceAddress:   "tb1q2rwweg2c48y8966qt4fzj0f4zyg9wty7tykzwg",
		ContractAddress: common.HexToAddress("0x6e3B806C5F6413e0a0670666301ccB6b10628A52"),
	}
	// evmConfig.PrivateKey = "aff969005325629eee2292e44b66aef1ec26426de7aecde2dc55b85648b84a91"
	// auth, err := evm.CreateEvmAuth(evmConfig)
	// assert.NoError(t, err)
	// evmClient.SetAuth(auth)
	payload, err := hex.DecodeString("00000000000000000000000000000000000000000000000000000000000003e8324e4d7268b0b65ba6fd71359b6460a82a9fae17af7434b48ad632e203156b750000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001424a1db57fa3ecafcbad91d6ef068439aceeae090000000000000000000000000")
	assert.NoError(t, err)
	receipt, err := sepoliaClient.ExecuteDestinationCall(event.ContractAddress, event.CommandId, event.SourceChain, event.SourceAddress, payload)
	assert.NoError(t, err)
	fmt.Printf("Receipt %v", receipt)
}
