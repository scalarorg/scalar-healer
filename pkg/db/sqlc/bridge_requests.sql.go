// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bridge_requests.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listBridgeRequests = `-- name: ListBridgeRequests :many
SELECT id, address, signature, chain_id, tx_hash, nonce, created_at, updated_at
FROM bridge_requests
WHERE address = $1
ORDER BY nonce DESC
LIMIT $2 OFFSET $3
`

type ListBridgeRequestsParams struct {
	Address []byte `json:"address"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) ListBridgeRequests(ctx context.Context, arg ListBridgeRequestsParams) ([]BridgeRequest, error) {
	rows, err := q.db.Query(ctx, listBridgeRequests, arg.Address, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BridgeRequest{}
	for rows.Next() {
		var i BridgeRequest
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Signature,
			&i.ChainID,
			&i.TxHash,
			&i.Nonce,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveBridgeRequest = `-- name: SaveBridgeRequest :exec
INSERT INTO bridge_requests (address, signature, chain_id, tx_hash, nonce)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (chain_id, nonce) DO NOTHING
`

type SaveBridgeRequestParams struct {
	Address   []byte         `json:"address"`
	Signature []byte         `json:"signature"`
	ChainID   pgtype.Numeric `json:"chain_id"`
	TxHash    []byte         `json:"tx_hash"`
	Nonce     pgtype.Numeric `json:"nonce"`
}

func (q *Queries) SaveBridgeRequest(ctx context.Context, arg SaveBridgeRequestParams) error {
	_, err := q.db.Exec(ctx, saveBridgeRequest,
		arg.Address,
		arg.Signature,
		arg.ChainID,
		arg.TxHash,
		arg.Nonce,
	)
	return err
}
