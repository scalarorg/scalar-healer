// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: custodian_groups.sql

package sqlc

import (
	"context"
)

const getAllCustodianGroups = `-- name: GetAllCustodianGroups :many
SELECT id, uid, name, bitcoin_pubkey, quorum, custodians, created_at, updated_at FROM custodian_groups
`

func (q *Queries) GetAllCustodianGroups(ctx context.Context) ([]CustodianGroup, error) {
	rows, err := q.db.Query(ctx, getAllCustodianGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustodianGroup{}
	for rows.Next() {
		var i CustodianGroup
		if err := rows.Scan(
			&i.ID,
			&i.Uid,
			&i.Name,
			&i.BitcoinPubkey,
			&i.Quorum,
			&i.Custodians,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustodianGroupByUID = `-- name: GetCustodianGroupByUID :one
SELECT id, uid, name, bitcoin_pubkey, quorum, custodians, created_at, updated_at FROM custodian_groups WHERE uid = $1
`

func (q *Queries) GetCustodianGroupByUID(ctx context.Context, uid []byte) (CustodianGroup, error) {
	row := q.db.QueryRow(ctx, getCustodianGroupByUID, uid)
	var i CustodianGroup
	err := row.Scan(
		&i.ID,
		&i.Uid,
		&i.Name,
		&i.BitcoinPubkey,
		&i.Quorum,
		&i.Custodians,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveCustodianGroups = `-- name: SaveCustodianGroups :exec
INSERT INTO custodian_groups (uid, name, bitcoin_pubkey, quorum, custodians)
VALUES (unnest($1::bytea[]), unnest($2::text[]), unnest($3::bytea[]), unnest($4::bigint[]), unnest($5::jsonb[]))
ON CONFLICT (uid) DO UPDATE
SET name = EXCLUDED.name,
    bitcoin_pubkey = EXCLUDED.bitcoin_pubkey,
    quorum = EXCLUDED.quorum,
    custodians = EXCLUDED.custodians
`

type SaveCustodianGroupsParams struct {
	Column1 [][]byte `json:"column_1"`
	Column2 []string `json:"column_2"`
	Column3 [][]byte `json:"column_3"`
	Column4 []int64  `json:"column_4"`
	Column5 [][]byte `json:"column_5"`
}

func (q *Queries) SaveCustodianGroups(ctx context.Context, arg SaveCustodianGroupsParams) error {
	_, err := q.db.Exec(ctx, saveCustodianGroups,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	return err
}
