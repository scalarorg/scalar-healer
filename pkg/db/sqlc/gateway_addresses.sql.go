// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: gateway_addresses.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGatewayAddress = `-- name: CreateGatewayAddress :exec
INSERT INTO gateway_addresses (address, chain_id)
VALUES ($1, $2)
`

type CreateGatewayAddressParams struct {
	Address []byte         `json:"address"`
	ChainID pgtype.Numeric `json:"chain_id"`
}

func (q *Queries) CreateGatewayAddress(ctx context.Context, arg CreateGatewayAddressParams) error {
	_, err := q.db.Exec(ctx, createGatewayAddress, arg.Address, arg.ChainID)
	return err
}

const createGatewayAddresses = `-- name: CreateGatewayAddresses :exec
INSERT INTO gateway_addresses (address, chain_id)
VALUES (unnest($1::bytea[]), unnest($2::numeric[]))
`

type CreateGatewayAddressesParams struct {
	Column1 [][]byte         `json:"column_1"`
	Column2 []pgtype.Numeric `json:"column_2"`
}

func (q *Queries) CreateGatewayAddresses(ctx context.Context, arg CreateGatewayAddressesParams) error {
	_, err := q.db.Exec(ctx, createGatewayAddresses, arg.Column1, arg.Column2)
	return err
}

const getGatewayAddress = `-- name: GetGatewayAddress :one
SELECT address
FROM gateway_addresses
WHERE chain_id = $1
`

func (q *Queries) GetGatewayAddress(ctx context.Context, chainID pgtype.Numeric) ([]byte, error) {
	row := q.db.QueryRow(ctx, getGatewayAddress, chainID)
	var address []byte
	err := row.Scan(&address)
	return address, err
}
