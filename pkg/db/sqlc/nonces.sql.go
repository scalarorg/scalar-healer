// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: nonces.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getNonce = `-- name: GetNonce :one
SELECT nonce FROM nonces
WHERE address = $1
`

func (q *Queries) GetNonce(ctx context.Context, address []byte) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getNonce, address)
	var nonce pgtype.Numeric
	err := row.Scan(&nonce)
	return nonce, err
}

const upsertNonce = `-- name: UpsertNonce :exec
INSERT INTO nonces (address,nonce) VALUES ($1,$2) 
ON CONFLICT (address) DO UPDATE SET nonce = EXCLUDED.nonce
`

type UpsertNonceParams struct {
	Address []byte         `json:"address"`
	Nonce   pgtype.Numeric `json:"nonce"`
}

func (q *Queries) UpsertNonce(ctx context.Context, arg UpsertNonceParams) error {
	_, err := q.db.Exec(ctx, upsertNonce, arg.Address, arg.Nonce)
	return err
}
