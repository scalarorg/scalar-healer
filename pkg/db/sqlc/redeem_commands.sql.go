// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: redeem_commands.sql

package sqlc

import (
	"context"
)

const listPendingSigningRedeemCommands = `-- name: ListPendingSigningRedeemCommands :many
SELECT id, chain, status, params, data, sig_hash, signature, created_at, updated_at FROM redeem_commands WHERE status = 'PENDING' AND signature IS NULL
`

func (q *Queries) ListPendingSigningRedeemCommands(ctx context.Context) ([]RedeemCommand, error) {
	rows, err := q.db.Query(ctx, listPendingSigningRedeemCommands)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RedeemCommand{}
	for rows.Next() {
		var i RedeemCommand
		if err := rows.Scan(
			&i.ID,
			&i.Chain,
			&i.Status,
			&i.Params,
			&i.Data,
			&i.SigHash,
			&i.Signature,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveRedeemCommand = `-- name: SaveRedeemCommand :exec
INSERT INTO redeem_commands (id, chain, status, params, data, sig_hash)
VALUES ($1, $2, $3, $4, $5, $6)
`

type SaveRedeemCommandParams struct {
	ID      []byte      `json:"id"`
	Chain   string      `json:"chain"`
	Status  BatchStatus `json:"status"`
	Params  []byte      `json:"params"`
	Data    []byte      `json:"data"`
	SigHash []byte      `json:"sig_hash"`
}

func (q *Queries) SaveRedeemCommand(ctx context.Context, arg SaveRedeemCommandParams) error {
	_, err := q.db.Exec(ctx, saveRedeemCommand,
		arg.ID,
		arg.Chain,
		arg.Status,
		arg.Params,
		arg.Data,
		arg.SigHash,
	)
	return err
}

const saveRedeemCommands = `-- name: SaveRedeemCommands :exec
INSERT INTO redeem_commands (id, chain, status, params, data, sig_hash)
VALUES (unnest($1::bytea[]), unnest($2::text[]), unnest($3::text[])::batch_status, unnest($4::bytea[]), unnest($5::bytea[]), unnest($6::bytea[]))
`

type SaveRedeemCommandsParams struct {
	Column1 [][]byte `json:"column_1"`
	Column2 []string `json:"column_2"`
	Column3 []string `json:"column_3"`
	Column4 [][]byte `json:"column_4"`
	Column5 [][]byte `json:"column_5"`
	Column6 [][]byte `json:"column_6"`
}

func (q *Queries) SaveRedeemCommands(ctx context.Context, arg SaveRedeemCommandsParams) error {
	_, err := q.db.Exec(ctx, saveRedeemCommands,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
		arg.Column6,
	)
	return err
}

const submitRedeemCommandSignature = `-- name: SubmitRedeemCommandSignature :exec
UPDATE redeem_commands SET signature = $1, status = 'SIGNED' WHERE id = $2
`

type SubmitRedeemCommandSignatureParams struct {
	Signature []byte `json:"signature"`
	ID        []byte `json:"id"`
}

func (q *Queries) SubmitRedeemCommandSignature(ctx context.Context, arg SubmitRedeemCommandSignatureParams) error {
	_, err := q.db.Exec(ctx, submitRedeemCommandSignature, arg.Signature, arg.ID)
	return err
}
