// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: redeem_requests.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listRedeemRequests = `-- name: ListRedeemRequests :many
SELECT rq.id, rq.address, rq.source_chain, rq.dest_chain, rq.symbol, rq.amount, rq.locking_script, rq.custodian_group_uid, rq.created_at, rq.updated_at, rc.status as status, rc.execute_data, COUNT(rq.id) AS count
FROM redeem_requests rq
LEFT JOIN redeem_commands rc ON rq.id = rc.request_id
WHERE rq.address = $1
GROUP BY rq.id, rc.status, rc.execute_data
ORDER BY rq.created_at DESC
LIMIT $2 OFFSET $3
`

type ListRedeemRequestsParams struct {
	Address []byte `json:"address"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type ListRedeemRequestsRow struct {
	ID                int64            `json:"id"`
	Address           []byte           `json:"address"`
	SourceChain       string           `json:"source_chain"`
	DestChain         string           `json:"dest_chain"`
	Symbol            string           `json:"symbol"`
	Amount            string           `json:"amount"`
	LockingScript     []byte           `json:"locking_script"`
	CustodianGroupUid []byte           `json:"custodian_group_uid"`
	CreatedAt         pgtype.Timestamp `json:"created_at"`
	UpdatedAt         pgtype.Timestamp `json:"updated_at"`
	Status            NullBatchStatus  `json:"status"`
	ExecuteData       []byte           `json:"execute_data"`
	Count             int64            `json:"count"`
}

func (q *Queries) ListRedeemRequests(ctx context.Context, arg ListRedeemRequestsParams) ([]ListRedeemRequestsRow, error) {
	rows, err := q.db.Query(ctx, listRedeemRequests, arg.Address, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRedeemRequestsRow{}
	for rows.Next() {
		var i ListRedeemRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.SourceChain,
			&i.DestChain,
			&i.Symbol,
			&i.Amount,
			&i.LockingScript,
			&i.CustodianGroupUid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.ExecuteData,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveRedeemRequest = `-- name: SaveRedeemRequest :one
INSERT INTO redeem_requests (address, source_chain, dest_chain, symbol, amount, locking_script, custodian_group_uid)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type SaveRedeemRequestParams struct {
	Address           []byte `json:"address"`
	SourceChain       string `json:"source_chain"`
	DestChain         string `json:"dest_chain"`
	Symbol            string `json:"symbol"`
	Amount            string `json:"amount"`
	LockingScript     []byte `json:"locking_script"`
	CustodianGroupUid []byte `json:"custodian_group_uid"`
}

func (q *Queries) SaveRedeemRequest(ctx context.Context, arg SaveRedeemRequestParams) (int64, error) {
	row := q.db.QueryRow(ctx, saveRedeemRequest,
		arg.Address,
		arg.SourceChain,
		arg.DestChain,
		arg.Symbol,
		arg.Amount,
		arg.LockingScript,
		arg.CustodianGroupUid,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
