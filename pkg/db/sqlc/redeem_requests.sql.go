// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: redeem_requests.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listRedeemRequests = `-- name: ListRedeemRequests :many
SELECT id, address, signature, chain, symbol, amount, nonce, created_at, updated_at
FROM redeem_requests
WHERE address = $1
ORDER BY nonce DESC
LIMIT $2 OFFSET $3
`

type ListRedeemRequestsParams struct {
	Address []byte `json:"address"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) ListRedeemRequests(ctx context.Context, arg ListRedeemRequestsParams) ([]RedeemRequest, error) {
	rows, err := q.db.Query(ctx, listRedeemRequests, arg.Address, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RedeemRequest{}
	for rows.Next() {
		var i RedeemRequest
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.Signature,
			&i.Chain,
			&i.Symbol,
			&i.Amount,
			&i.Nonce,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveRedeemRequest = `-- name: SaveRedeemRequest :exec
INSERT INTO redeem_requests (address,  signature, chain, symbol, amount, nonce)
VALUES ($1, $2, $3, $4, $5, $6)
`

type SaveRedeemRequestParams struct {
	Address   []byte         `json:"address"`
	Signature []byte         `json:"signature"`
	Chain     string         `json:"chain"`
	Symbol    string         `json:"symbol"`
	Amount    string         `json:"amount"`
	Nonce     pgtype.Numeric `json:"nonce"`
}

func (q *Queries) SaveRedeemRequest(ctx context.Context, arg SaveRedeemRequestParams) error {
	_, err := q.db.Exec(ctx, saveRedeemRequest,
		arg.Address,
		arg.Signature,
		arg.Chain,
		arg.Symbol,
		arg.Amount,
		arg.Nonce,
	)
	return err
}
