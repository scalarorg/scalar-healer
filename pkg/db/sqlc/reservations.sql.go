// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reservations.sql

package sqlc

import (
	"context"
)

const deleteReservations = `-- name: DeleteReservations :exec
DELETE FROM reservations WHERE request_id IN (
  SELECT r.request_id
  FROM reservations r
  LEFT JOIN utxo_reservations ur ON r.request_id = ur.reservation_id
  WHERE ur.reservation_id IS NULL
)
`

func (q *Queries) DeleteReservations(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteReservations)
	return err
}

const saveReservations = `-- name: SaveReservations :many
INSERT INTO reservations (
    request_id
) VALUES (
    unnest($1::bytea[])
) RETURNING request_id
`

func (q *Queries) SaveReservations(ctx context.Context, dollar_1 [][]byte) ([][]byte, error) {
	rows, err := q.db.Query(ctx, saveReservations, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := [][]byte{}
	for rows.Next() {
		var request_id []byte
		if err := rows.Scan(&request_id); err != nil {
			return nil, err
		}
		items = append(items, request_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
