// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: reservations.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteReservations = `-- name: DeleteReservations :exec
DELETE FROM reservations WHERE id IN (
  SELECT r.id
  FROM reservations r
  LEFT JOIN utxo_reservations ur ON r.id = ur.reservation_id
  WHERE ur.reservation_id IS NULL
)
`

func (q *Queries) DeleteReservations(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteReservations)
	return err
}

const saveReservations = `-- name: SaveReservations :many
INSERT INTO reservations (
    request_id,
    amount
) VALUES (
    unnest($1::text[]),
    unnest($2::numeric[])
) RETURNING id, request_id
`

type SaveReservationsParams struct {
	Column1 []string         `json:"column_1"`
	Column2 []pgtype.Numeric `json:"column_2"`
}

type SaveReservationsRow struct {
	ID        int64  `json:"id"`
	RequestID string `json:"request_id"`
}

func (q *Queries) SaveReservations(ctx context.Context, arg SaveReservationsParams) ([]SaveReservationsRow, error) {
	rows, err := q.db.Query(ctx, saveReservations, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SaveReservationsRow{}
	for rows.Next() {
		var i SaveReservationsRow
		if err := rows.Scan(&i.ID, &i.RequestID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
