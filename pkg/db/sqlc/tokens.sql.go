// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTokenAddressBySymbol = `-- name: GetTokenAddressBySymbol :one
SELECT address FROM tokens WHERE chain = $1 AND symbol = $2
`

type GetTokenAddressBySymbolParams struct {
	Chain  string `json:"chain"`
	Symbol string `json:"symbol"`
}

func (q *Queries) GetTokenAddressBySymbol(ctx context.Context, arg GetTokenAddressBySymbolParams) ([]byte, error) {
	row := q.db.QueryRow(ctx, getTokenAddressBySymbol, arg.Chain, arg.Symbol)
	var address []byte
	err := row.Scan(&address)
	return address, err
}

const getTokenSymbolByAddress = `-- name: GetTokenSymbolByAddress :one
SELECT symbol FROM tokens WHERE chain = $1 AND address = $2
`

type GetTokenSymbolByAddressParams struct {
	Chain   string `json:"chain"`
	Address []byte `json:"address"`
}

func (q *Queries) GetTokenSymbolByAddress(ctx context.Context, arg GetTokenSymbolByAddressParams) (string, error) {
	row := q.db.QueryRow(ctx, getTokenSymbolByAddress, arg.Chain, arg.Address)
	var symbol string
	err := row.Scan(&symbol)
	return symbol, err
}

const listTokens = `-- name: ListTokens :many
SELECT id, symbol, chain, chain_id, active, address, created_at, updated_at FROM tokens
`

func (q *Queries) ListTokens(ctx context.Context) ([]Token, error) {
	rows, err := q.db.Query(ctx, listTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Token{}
	for rows.Next() {
		var i Token
		if err := rows.Scan(
			&i.ID,
			&i.Symbol,
			&i.Chain,
			&i.ChainID,
			&i.Active,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTokens = `-- name: SaveTokens :exec
INSERT INTO tokens (address, chain, chain_id, symbol, active)
VALUES (unnest($1::bytea[]), unnest($2::text[]), unnest($3::numeric[]), unnest($4::text[]), unnest($5::boolean[]))
ON CONFLICT (symbol, chain) DO NOTHING
`

type SaveTokensParams struct {
	Column1 [][]byte         `json:"column_1"`
	Column2 []string         `json:"column_2"`
	Column3 []pgtype.Numeric `json:"column_3"`
	Column4 []string         `json:"column_4"`
	Column5 []bool           `json:"column_5"`
}

func (q *Queries) SaveTokens(ctx context.Context, arg SaveTokensParams) error {
	_, err := q.db.Exec(ctx, saveTokens,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Column5,
	)
	return err
}
